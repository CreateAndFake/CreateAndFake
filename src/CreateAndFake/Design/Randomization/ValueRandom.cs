using System;
using System.Collections.Generic;
using System.Linq;

namespace CreateAndFake.Design.Randomization
{
    /// <summary>Provides the core functionality for generic randomization.</summary>
    public abstract class ValueRandom : IRandom
    {
        /// <summary>Supported types and the methods used to generate them.</summary>
        private static readonly IDictionary<Type, Func<ValueRandom, object>> _Gens
            = new Dictionary<Type, Func<ValueRandom, object>>
            {
                { typeof(double), gen => Create(gen, BitConverter.ToDouble, 8,
                    double.NaN, double.NegativeInfinity, double.PositiveInfinity) },
                { typeof(float), gen => Create(gen, BitConverter.ToSingle, 4,
                    float.NaN, float.NegativeInfinity, float.PositiveInfinity) },

                { typeof(ushort), gen => Create(gen, BitConverter.ToUInt16, 2) },
                { typeof(ulong), gen => Create(gen, BitConverter.ToUInt64, 8) },
                { typeof(short), gen => Create(gen, BitConverter.ToInt16, 2) },
                { typeof(uint), gen => Create(gen, BitConverter.ToUInt32, 4) },
                { typeof(long), gen => Create(gen, BitConverter.ToInt64, 8) },
                { typeof(char), gen => Create(gen, BitConverter.ToChar, 2) },
                { typeof(int), gen => Create(gen, BitConverter.ToInt32, 4) },

                { typeof(byte), gen => gen.NextBytes(1)[0] },
                { typeof(sbyte), gen => (sbyte)gen.Next<byte>() },
                { typeof(bool), gen => (gen.Next<byte>() > byte.MaxValue / 2) },
                { typeof(decimal), gen => new decimal(gen.Next<int>(), gen.Next<int>(),
                    gen.Next<int>(), gen.Next<bool>(), gen.Next<byte>(29)) }
            };

        /// <summary>Creates values.</summary>
        /// <typeparam name="T">Type to create.</typeparam>
        /// <param name="gen">Random instance.</param>
        /// <param name="converter">Converter for the type.</param>
        /// <param name="size">Number of bytes in the type.</param>
        /// <param name="invalids">Special invalid values for the type.</param>
        /// <returns>Created value.</returns>
        private static T Create<T>(ValueRandom gen, Func<byte[], int, T> converter, short size, params T[] invalids)
        {
            T value;
            do
            {
                value = converter.Invoke(gen.NextBytes(size), 0);
            } while (gen.OnlyValidValues && invalids.Any(v => v.Equals(value)));
            return value;
        }

        /// <summary>All default value types.</summary>
        public static ICollection<Type> ValueTypes { get; } = _Gens.Keys;

        /// <summary>Option to prevent generating invalid values.</summary>
        public bool OnlyValidValues { get; set; }

        /// <inheritdoc/>
        public abstract int? InitialSeed { get; }

        /// <summary>Sets up the randomizer.</summary>
        /// <param name="onlyValidValues">Option to prevent generating invalid values.</param>
        protected ValueRandom(bool onlyValidValues)
        {
            OnlyValidValues = onlyValidValues;
        }

        /// <summary>Generates a byte array filled with random bytes.</summary>
        /// <param name="length">Length of the array to generate.</param>
        /// <returns>The generated byte array.</returns>
        protected abstract byte[] NextBytes(short length);

        /// <inheritdoc/>
        public bool Supports<T>() where T : struct, IComparable, IComparable<T>, IEquatable<T>
        {
            return Supports(typeof(T));
        }

        /// <inheritdoc/>
        public bool Supports(Type type)
        {
            return _Gens.ContainsKey(type);
        }

        /// <inheritdoc/>
        public T Next<T>() where T : struct, IComparable, IComparable<T>, IEquatable<T>
        {
            return (T)Next(typeof(T));
        }

        /// <inheritdoc/>
        public object Next(Type type)
        {
            if (type == null) throw new ArgumentNullException(nameof(type));

            if (!Supports(type))
            {
                throw new NotSupportedException($"Type '{type.Name}' not supported.");
            }
            else
            {
                return _Gens[type].Invoke(this);
            }
        }

        /// <inheritdoc/>
        public T Next<T>(T max) where T : struct, IComparable, IComparable<T>, IEquatable<T>
        {
            return Next(default, max);
        }

        /// <inheritdoc/>
        public T Next<T>(T min, T max) where T : struct, IComparable, IComparable<T>, IEquatable<T>
        {
            if (!Supports<T>())
            {
                throw new NotSupportedException($"Type '{typeof(T).Name}' not supported.");
            }
            else if (min.Equals(max))
            {
                return min;
            }
            else if (min.CompareTo(max) >= 0)
            {
                throw new ArgumentOutOfRangeException(nameof(max), max,
                    $"Value must be greater than given min: '{min}'.");
            }
            else if (typeof(T) == typeof(bool))
            {
                return default;
            }
            else
            {
                try
                {
                    return CalcNext(min, max);
                }
                catch (ArithmeticException)
                {
                    return StumbleNext(min, max);
                }
            }
        }

        /// <summary>Uses an algorithm to generate the next value.</summary>
        /// <typeparam name="T">Value type to generate.</typeparam>
        /// <param name="min">Inclusive lower boundary for the value.</param>
        /// <param name="max">Exclusive upper boundary for the value.</param>
        /// <returns>The generated value.</returns>
        private T CalcNext<T>(T min, T max) where T : struct, IComparable, IComparable<T>, IEquatable<T>
        {
            dynamic percent;

            // Creates a number in the range of 0.0 to 1.0.
            if (typeof(T) != typeof(decimal))
            {
                percent = (double)Next<uint>() / uint.MaxValue;
            }
            else
            {
                percent = (decimal)Next<uint>() / uint.MaxValue;
            }

            checked
            {
                T value = (T)(percent * ((dynamic)max - min) + min);

                // Prevent any issues steming from imprecision.
                return (value.CompareTo(max) < 0) ? value : min;
            }
        }

        /// <summary>Randoms until acceptable for the next value.</summary>
        /// <typeparam name="T">Value type to generate.</typeparam>
        /// <param name="min">Inclusive lower boundary for the value.</param>
        /// <param name="max">Exclusive upper boundary for the value.</param>
        /// <returns>The generated value.</returns>
        private T StumbleNext<T>(T min, T max) where T : struct, IComparable, IComparable<T>, IEquatable<T>
        {
            dynamic value;
            do
            {
                value = Next<T>();
            } while (value < min || value >= max);
            return value;
        }

        /// <inheritdoc/>
        public T NextItem<T>(IEnumerable<T> items)
        {
            if (items == null)
            {
                throw new ArgumentNullException(nameof(items));
            }
            else if (items is ICollection<T> collection)
            {
                return collection.ElementAt(Next(collection.Count));
            }
            else
            {
                return items.OrderBy(i => Next<int>()).First();
            }
        }

        /// <inheritdoc/>
        public DataRandom NextData()
        {
            return new(this);
        }
    }
}
